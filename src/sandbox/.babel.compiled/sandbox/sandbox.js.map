{"version":3,"sources":["../../sandbox.js"],"names":["Ajv","HeaderValidator","actualHeadersSchema","metadataHeadersSchema","schemaStaticProperties","typeProperties","map","property","properties","ajv","default","allErrors","_ajv","_validate","compile","header","requestValidate","cond","obj1","prop1","prop2","console","log","temp","prop3","test","obj2"],"mappings":"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","file":"sandbox.js","sourcesContent":["import * as Ajv from 'ajv'\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nclass HeaderValidator {\r\n    constructor() {\r\n        const actualHeadersSchema = {\r\n            \"type\": \"array\",\r\n            \"items\": {\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"name\": {\r\n                        \"type\": \"string\"\r\n                    },\r\n                    \"value\": {\r\n                        \"type\": \"string\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let metadataHeadersSchema = {\r\n            \"type\":\"object\",\r\n            \"properties\": {\r\n                \"initiator\": { \r\n                    \"type\": [ \"string\", \"null\" ],\r\n                    \"format\": \"uri\"\r\n                },\r\n                \"method\": {\r\n                    \"type\": \"string\",\r\n                    \"enum\": [\r\n                        \"GET\", \"DELETE\", \"POST\", \"HEAD\", \"PUT\", \r\n                        \"CONNECT\", \"OPTIONS\", \"TRACE\"\r\n                    ]\r\n                },\r\n                \"requestHeaders\": {\r\n                    \"type\": \"array\"\r\n                },\r\n                \"type\": {\r\n                    \"type\": \"string\",\r\n                    \"enum\": [\r\n                        \"main_frame\", \"sub_frame\", \"stylesheet\", \"script\", \r\n                        \"image\", \"font\", \"object\", \"xmlhttprequest\", \"ping\", \r\n                        \"csp_report\", \"media\", \"websocket\", \"other\"\r\n                    ]\r\n                },\r\n                \"responseHeaders\": actualHeadersSchema,\r\n                \"requestHeaders\": actualHeadersSchema\r\n            },\r\n            \"required\": [\r\n                \"frameId\", \"method\", \"parentFrameId\", \"timeStamp\", \r\n                \"tabId\", \"type\", \"url\", \"requestId\"\r\n            ],\r\n            \"additionalProperties\": false,\r\n            /*\r\n               // try to add to logic to validator to require certain headers depending if it's a request or response\r\n            \r\n               \"if\": {\r\n                   \"properties\" : {\r\n                       \"responseHeaders\": {\r\n                           \"type\": \"array\",\r\n                           \"minItems\": 0\r\n                       },\r\n                   }\r\n               },\r\n               \"then\": { \"required\": [ \"requestHeaders\" ] },\r\n               \"else\": { \"required\": [ \"responseHeaders\", \"statusCode\", \"statusLine\" ] }\r\n            */\r\n        }\r\n\r\n        const schemaStaticProperties = {\r\n            \"number\": [\"frameId\", \"statusCode\", \"timeStamp\", \"tabId\", \"parentFrameId\"],\r\n            \"string\": [\"url\", \"statusLine\", \"requestId\"]\r\n        }\r\n\r\n        for ( let typeProperties in schemaStaticProperties ) {    \r\n            schemaStaticProperties[typeProperties].map((property) => {\r\n                metadataHeadersSchema = {\r\n                    ...metadataHeadersSchema,\r\n                    \"properties\": {\r\n                        ...metadataHeadersSchema.properties,\r\n                        [property]: { \"type\": typeProperties }\r\n                    },\r\n                }\r\n            });    \r\n        }\r\n        \r\n        let ajv = new Ajv.default({allErrors: true});\r\n        this._ajv = ajv;\r\n        this._validate = ajv.compile(metadataHeadersSchema);\r\n    }\r\n    \r\n    getAJV() {\r\n        return this._ajv\r\n    }\r\n\r\n    getValidation(header) {\r\n        return this._validate(header)\r\n    }\r\n\r\n    getValidate() {\r\n        return this._validate\r\n    }\r\n}\r\n\r\nlet requestValidate = new HeaderValidator();\r\n\r\n// JSON.parse(fs.readFileSync(path.join(__dirname) + \"\\\\sandbox.json\")).map((mockHTTPRequest) => {        \r\n//     if (\r\n//         requestValidate.getValidation(mockHTTPRequest)\r\n//     ) console.log('Valid');\r\n//     else console.log(\r\n//         'Invalid: ' + requestValidate.getAJV().errorsText(\r\n//             requestValidate.getValidate().errors\r\n//             ));\r\n// });\r\n\r\nlet cond = true;\r\nlet obj1 = {\r\n    prop1: 'hello',\r\n    ...(cond ? { prop2: 'world' } : null),\r\n    ...(cond ? { prop2: 'world' } : null)\r\n};\r\nconsole.log(obj1)\r\n\r\nlet temp = \"test\";\r\nobj1 = {\r\n    ...obj1,\r\n    temp,\r\n    ...(obj1.prop3 ? null: { prop3: \"again\" } ),\r\n    [temp.test ? \"yes\": \"no\"]:\"conditional key\",\r\n    \"value\": (temp ? \"yes\":\"no\")\r\n}\r\nconsole.log(obj1)\r\n// { prop1: 'hello', prop2: 'world' }\r\n\r\ncond = false;\r\nlet obj2 = {\r\n    prop1: 'hello',\r\n    ...(cond ? { prop2: 'world' } : null)\r\n};\r\n// { prop1: 'hello' }"]}